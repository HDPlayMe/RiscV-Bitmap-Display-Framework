Para imprimir una imagen en un Bitmap Display es necesario primero decodificar la imagen.

Si no posees una imagen con la que trabajar, puedes diseñar tus pequeños proyectos con
un tamaño especificado (64x64,128x128...) en la siguiente plataforma online:

https://es.pixilart.com/draw/16x16-1fd3f39f05fdf50

Una imagen esta compuesta por un conjunto de pixeles con una combinacion de colores RGB
como se explica en "Colores.txt". Esta combinación en el RARs se expresa utilzando
combinaciones hexadecimales. Existen gran cantidad de conversores de imagen a mapa de
bits. En nuestro caso utilizaremos el siguiente conversor gratuito:

https://lvgl.io/tools/imageconverter
(Output Format RGB888)

Este conversor devuelve en formato binario una secuencia de bytes a guardar en memoria
que permitirán representar la imagen.
Como este fichero esta en binario (.bin) podemos trabajar directamente con su contenido
redirigiendolo a otro fichero de texto (.txt). Para conseguir esto podemos directamente
desde una terminal introducir:

$ od -A n -j 4 -vt x4 .\Image.bin | tr -d '\r\n' > .\Image.txt

(donde "Image" es el nombre del fichero)
Nota: Puede ejectutarse desde el terminal de Windows con WinGNU

Como información adicional, este comando realiza las siguientes acciones:

od -> Lee un formato binario
-A n -> Elimina el número de linea
-j 4 -> Elimina los primeros 4 bytes (No son de la imagen)
-vt x4 -> Codifica en hexadecimal (Cogiendo de a parejas de 4)
tr -d '\r\n' -> Elimina los saltos de linea (IMPORTANTE: En linux su equivalente es '\n')

Una vez obtenido el valor en hexadecimal de cada pixel debemos guardarlo en memoria.

Como ayuda adicional se adjunta "RiscVGenerator.py" un archivo .py que al ejecutarlo
toma el nombre del archivo de texto y devuelve los valores en un formato aceptado por
el RARs. Importante utilizarlo siguiendo los pasos anteriores.

Una vez guardado en memoria. Podemos imprimir la imagen creando un bucle que:

- Lea el color especificado de memoria
- Lo imprima en pantalla
- Cambie de pixel
- Si alcanza el ancho de imagen, salte de linea


Un factor a tener en cuenta es el coste en memoria del procesador de este método.
Tenemos que guardar TODOS los pixeles de la imagen en memoria en tiempo de compilacion,
una idea que queda fuera de los contenidos de esta guía puede ser tomar los valores 
directamente del archivo de texto en tiempo de ejecución. Lo que libera al procesador
del guardado de datos.

Como ayuda adicional se ha agregado el ejemplo (Simple Shapes) con una representacion en
512x512 de una imagen. Para ello tambien se adjunta el útil IMAGE.s que representa una
imagen en un display de tamaño variable SIZE.

Importante: Con este util pueden suceder errores en el tiempo de ejecución si la imagen
a imprimir es muy grande y por tanto, ocupa mucho espacio en el RiscV.


-----------
Resumen   |
-----------

- Plataforma de diseñado: https://es.pixilart.com/draw/16x16-1fd3f39f05fdf50
- Imagen a Binario: https://lvgl.io/tools/imageconverter
- Binario a texto: $od -A n -j 4 -vt x4 .\Image.bin | tr -d '\r\n' > .\Image.txt
- Texto a RARs: RiscVGenerator.py (Utiles)
- Subrutina Impresion: IMAGE.s (512x512)
- Programa de Ejemplo: Simple_Image.asm

